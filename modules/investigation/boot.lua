local MODULE = MODULE or {}

-- Module information
MODULE.name = "Investigation Points"
MODULE.description = "Adds interactive investigation points with floating markers and information displays"
MODULE.author = "Generated by Claude for 2000s Sci-Fi Horror Game"

-- Shared configuration
MODULE.config = {
    markerText = "[!]",
    markerFont = "DisclaimerFont",
    markerColor = Color(255, 255, 255, 255),
    fadeDistance = 300, -- Distance at which markers begin to fade in
    fullVisibleDistance = 150, -- Distance at which markers are fully visible
    useKey = IN_USE, -- Default E key
    subtitleDuration = 7 -- How long subtitles stay visible (seconds)
}

-- Register entity
if SERVER then
    AddCSLuaFile()
    -- Create the entity for placing investigation points
    local ENT = {}
    ENT.Type = "anim"
    ENT.Base = "base_gmodentity"
    ENT.PrintName = "Investigation Point"
    ENT.Category = "Horror Game"
    ENT.Spawnable = true
    ENT.AdminOnly = true

    function ENT:Initialize()
        self:SetModel("models/props_junk/watermelon01.mdl")
        self:SetMaterial("models/wireframe")
        self:SetColor(Color(255, 255, 255, 10))
        self:SetRenderMode(RENDERMODE_TRANSALPHA)
        self:PhysicsInit(SOLID_VPHYSICS)
        self:SetMoveType(MOVETYPE_VPHYSICS)
        self:SetSolid(SOLID_VPHYSICS)
        self:SetUseType(SIMPLE_USE)
        self:SetCollisionGroup(COLLISION_GROUP_WORLD)
        
        -- Default values
        self:SetNWString("Title", "Unknown Evidence")
        self:SetNWString("Description", "No information available.")
        self:SetNWString("SoundPath", "buttons/button15.wav")
        self:SetFadeDistance(300)
        self:SetFullVisibleDistance(150)
        self:SetSubtitleDuration(7)
    end

    function ENT:Use(activator, caller)
        if IsValid(activator) and activator:IsPlayer() then
            -- Trigger the subtitle on client
            net.Start("InvestigationPoint_Display")
            net.WriteEntity(self)
            net.Send(activator)
        end
    end

    function ENT:SetupDataTables()
        -- Setting up data tables allows for proper networking and persistence
        self:NetworkVar("String", 0, "Title")
        self:NetworkVar("String", 1, "Description")
        self:NetworkVar("String", 2, "SoundPath")
        self:NetworkVar("Float", 0, "FadeDistance")
        self:NetworkVar("Float", 1, "FullVisibleDistance")
        self:NetworkVar("Float", 2, "SubtitleDuration")
    end

    scripted_ents.Register(ENT, "investigation_point")
end

-- Open VGUI command for creating investigation points
ax.command:Register("CreateInvestPoint", {
    Description = "Open a VGUI to create an investigation point with a title and description.",
    AdminOnly = true,
    Callback = function(info, client, arguments)
        if SERVER then
            net.Start("InvestigationPoint_OpenCreator")
            net.Send(client)
        end
    end
})

-- Admin command to remove all investigation points
ax.command:Register("RemoveInvestPoints", {
    Description = "Remove all investigation points or the closest one.",
    AdminOnly = true,
    Callback = function(info, client, arguments)
        if arguments[1] == "all" then
            local count = 0
            for _, ent in pairs(ents.FindByClass("investigation_point")) do
                if IsValid(ent) then
                    ent:Remove()
                    count = count + 1
                end
            end
            client:Notify("Removed " .. count .. " investigation points.", NOTIFY_HINT)
        else
            -- Find closest point
            local closestPoint = nil
            local closestDist = 300 -- Max distance for removal
            local clientPos = client:GetPos()
            
            for _, ent in pairs(ents.FindByClass("investigation_point")) do
                if IsValid(ent) then
                    local dist = clientPos:Distance(ent:GetPos())
                    if dist < closestDist then
                        closestDist = dist
                        closestPoint = ent
                    end
                end
            end
            
            if IsValid(closestPoint) then
                local title = closestPoint:GetNWString("Title")
                closestPoint:Remove()
                client:Notify("Removed investigation point: " .. title, NOTIFY_HINT)
            else
                client:Notify("No investigation points found nearby.", NOTIFY_ERROR)
            end
        end
    end
})

-- Admin command to edit an existing investigation point via VGUI
ax.command:Register("EditInvestPoint", {
    Description = "Open a VGUI to edit the closest investigation point.",
    AdminOnly = true,
    Callback = function(info, client, arguments)
        -- Find closest point
        local closestPoint = nil
        local closestDist = 300 -- Max distance for editing
        local clientPos = client:GetPos()
        
        for _, ent in pairs(ents.FindByClass("investigation_point")) do
            if IsValid(ent) then
                local dist = clientPos:Distance(ent:GetPos())
                if dist < closestDist then
                    closestDist = dist
                    closestPoint = ent
                end
            end
        end
        
        if IsValid(closestPoint) then
            -- Send the entity info to the client for editing
            net.Start("InvestigationPoint_OpenEditor")
            net.WriteEntity(closestPoint)
            net.WriteString(closestPoint:GetNWString("Title", ""))
            net.WriteString(closestPoint:GetNWString("Description", ""))
            net.Send(client)
        else
            client:Notify("No investigation points found nearby.", NOTIFY_ERROR)
        end
    end
})

return MODULE